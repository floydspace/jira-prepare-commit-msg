{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clear": {
      "name": "clear",
      "steps": [
        {
          "exec": "rimraf lib dist"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "esbuild --bundle --minify src/index.ts --platform=node --packages=external --outdir=lib"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "integration-test": {
      "name": "integration-test",
      "steps": [
        {
          "exec": "cd ./test/husky2 && git init && git checkout -b JIRA-4321-test-husky2 && npm i --no-package-lock"
        },
        {
          "exec": "cd ./test/husky3 && git init && git checkout -b JIRA-4321-test-husky3 && npm i --no-package-lock"
        },
        {
          "exec": "cd ./test/husky4 && git init && git checkout -b JIRA-4321-test-husky4 && npm i --no-package-lock"
        },
        {
          "exec": "cd ./test/husky5 && git init && git checkout -b JIRA-4321-test-husky5 && npm i --no-package-lock"
        },
        {
          "exec": "ava test/test.ts"
        },
        {
          "exec": "cd ./test/husky2 && rimraf .git && rimraf node_modules"
        },
        {
          "exec": "cd ./test/husky3 && rimraf .git && rimraf node_modules"
        },
        {
          "exec": "cd ./test/husky4 && rimraf .git && rimraf node_modules"
        },
        {
          "exec": "cd ./test/husky5 && rimraf .git && rimraf node_modules && rimraf .husky"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(npm pack) dist/js/"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "spawn": "clear"
        },
        {
          "spawn": "type-check"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "publish": {
      "name": "publish",
      "steps": [
        {
          "spawn": "build"
        },
        {
          "exec": "npm publish dist/js/jira-prepare-conventional-commit-msg-1.0.0.tgz"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"master\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "say": "No unit tests yet"
        }
      ]
    },
    "type-check": {
      "name": "type-check",
      "steps": [
        {
          "exec": "tsc --noEmit --project tsconfig.dev.json"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm update npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor"
        },
        {
          "exec": "npm install"
        },
        {
          "exec": "npm update"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
